{"version":3,"sources":["components/AddCategory.js","GifGridItem.js","helpers/getGifs.js","GifGrids.js","hooks/useFechGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","images","downsized_medium","GifGrids","loading","state","setState","useEffect","then","imgs","useFechGifs","imagenes","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAa,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,eAFD,mBAEpCC,EAFoC,KAExBC,EAFwB,KA6B3C,OACI,sBAAMC,SApBY,SAACC,GACnBA,EAAGC,iBAIAJ,EAAWK,OAAOC,OAAO,IAExBR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,MAYlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SA7Bc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCRlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAChC,OACI,sBAAKC,UAAU,gDAAf,UACA,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,8BAAIA,EAAJ,W,uBCISK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAWF,GAD/C,+DAEKG,MAAOR,GAFZ,cAEbS,EAFa,gBAGCA,EAAUC,OAHX,uBAGZC,EAHY,EAGZA,KAIDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAXvB,kBAgBZY,GAhBY,4CAAH,sDCLXM,EAAU,SAAC,GAAc,IAAbb,EAAY,EAAZA,SAAY,ECFV,SAACA,GAAc,IAAD,EAEPpB,mBAAS,CAC/B0B,KAAK,GACLQ,SAAQ,IAJqB,mBAE1BC,EAF0B,KAEnBC,EAFmB,KA6BjC,OAtBAC,qBAAW,WAEHlB,EAASC,GACJkB,MAAM,SAAAC,GACHH,EAAS,CACLV,KAAKa,EACLL,SAAS,SAM1B,CAACd,IAUGe,EDvBqBK,CAAYpB,GAAhCqB,EAJqB,EAI1Bf,KAAcQ,EAJY,EAIZA,QAerB,OACI,qCACI,mCAAMd,EAAN,OACCc,GAAW,wCACZ,qBAAKlB,UAAU,YAAf,SAGIyB,EAASb,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEQA,GADCA,EAAIC,aE9BpBY,EAAe,WAAO,IAAD,EACM1C,mBAAS,CAAC,WADhB,mBACvBQ,EADuB,KACXT,EADW,KAO9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAcA,cAAeA,IAE7B,uBAEA,6BAGQS,EAAWoB,KAAM,SAAAR,GAAQ,OACrB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YClB7BuB,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.d62adf21.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory =({setCategorias}) => { // se crea constante para todo el codigo\r\n                        //se usa el setCategoriascomo una prop podria agregarce categorias como props pero es mas facil si lo pasas como  funcion\r\n    const [inputValue, setInputValue]= useState(\"Busque gifs\");// sze hace uso de un estado y se desestructura\r\n    //se desestructura el useState el cual cuenta con dos propiedades inputValue donde se ingresa la informacion y setInputValue que te permite hacer cambios en el primer argumento osease inputValue\r\n\r\n\r\n    const handleImputChange = (e) =>{ // con la e se llama a evento de la funcion\r\n        setInputValue(e.target.value) //con el setInputValue llamas a la funbcion que  indica que puedes modificar la informacion ene este caso agregar, posteriormente llamas a sus argumentos la e hace referencia al evento y el target.value a lso componentes y sus valores denbtro del evento dell imput\r\n    }\r\n\r\n    const handleSubmint = (e) =>{ // con la \"e\" se llama a evento de la funcion\r\n        e. preventDefault(); // previene que se ejecute la acualizacion del evento que se hace por default\r\n        //setCategorias(categorias => [...categorias,inputValue]);\r\n                    //se llama a categorias como una funcion para indicar que se pasan todos sus valores del argumento\r\n\r\n        if(inputValue.trim().length>2){\r\n            //setCategorias(categorias => [...categorias,inputValue]); se movera de posicion ...categorias para que primero coloque la busqueda y luego el default\r\n            setCategorias(categorias => [inputValue,...categorias]);\r\n            setInputValue(\"\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //se crea el html\r\n    // se creal el form para utilizar el cuadro dde texto, el form tambien nos sirve como un metodo agrupador en ves de usar el div\r\n    //<div> se sustituye el div por el form ya que se requiere hacer un formulario y puede sustituir al div como metodo agrupador\r\n    return(\r\n        <form onSubmit={handleSubmint}>\r\n        {/*se crea evento onSubmit que evita que realice la actualizacion de la pagina cuando le das enter el handleSubmint maneja el cambio de url*/}\r\n            <input // se crea una caja para texto input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleImputChange}\r\n            />\r\n            {//se creo un evento onchange que funciona cuando se realiza un cambio en el la caja input que es de texto\r\n            //handleImputChange= manejar el cambio de entrada\r\n            //despues de crear el html  para el handleImputChange\r\n            }\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nAddCategory.propTypes={\r\n    setCategorias:PropTypes.func.isRequired\r\n}\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({title, url}) => {// se trae las props img title url\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDownBig\">\r\n        <img src={url} alt={title} />\r\n        <p>{title} </p>\r\n        </div>\r\n    )\r\n}\r\n","//se crea Getgrifs para no combinar codigos dentro del getGrids\r\n\r\n\r\n\r\n//gif urlapi.giphy.com/v1/gifs/search en la app Postman se ingresa en la parte del get\r\n//en la misma ap postman se agrega en la parte de quary param la palabra api_key y en value se pone: gif apiKey v2WlBexgYrfbp42CQWH2nSoOoW4Emf94\r\n// posteriormente pones la q en la parte de quary params que indicara busqueda y enb value escoges el gif a buscar (naruto)\r\n// despues en quary params agregas un limitge a la cantidad de gif en value pones la cantidad (20)\r\n // todo esto arrojara una url la cual utilizaremos en la siguiente constante\r\n\r\n    export const getGifs = async (category) => { // se manda como argumento a category para poder utilizarlo en la parte del url\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=11&api_key=v2WlBexgYrfbp42CQWH2nSoOoW4Emf94` // url obtenido de app postman\r\n        const respuesta = await fetch (url);\r\n        const {data}= await respuesta.json(); // se desestructura el data para que no sea el data y el json si no solo nos traiga los elementons de l data\r\n        //console.log(data); se realizo esta impresion para poder ver co,mo llegar hasta el url deseado al aparecer data en consola pudiomos ingresar a image y de ahi url de acuerdo al tamaÃ±o que desamos\r\n\r\n\r\n        const gifs = data.map( img => { // se crea una constante gifs donde se hace la funcion del data.map img sera la funcion que serra utilizada\r\n            return {\r\n                id: img.id, // en el data se utilizara el id y se une con la funcion img por eso se coloca co,mo una ruta img.id\r\n                title: img.title, // para utilizar el title tambien  se hace como una ruta utilizando la funcion img.title\r\n                url: img.images?.downsized_medium.url // se le pone el signo de interrogacion ya quye es una condicional entonces si algo sdale mal y no trae el images debido a que tal vez no tengan esa seccion el condicional trabahjara evitando el error\r\n            }\r\n        })\r\n\r\n        // como mivimos toda la funcion a este archivo aqui no existe el setImages(gifs) por lo cual lo comentamos\r\n        return gifs; // regresa una promesa de async que retorna la coleccion de mis imagenes\r\n\r\n\r\n    };\r\n    // se comenta el llamado de esta funciuon debido a que no necesitamos que traiga toda la infort,macion cada que se ejecute, si  no una sola vez, con el useEffect\r\n    //getGifs(); // este se ejecutara una y  otra vez cada que presiones el boton te traera toda la informacion del url y no es necesario, para traer la informacion  del data solpo una spola vez se usara la funcion useEffect\r\n","import React from \"react\";\r\nimport {GifGridItem} from \"./GifGridItem\";\r\n//import {getGifs} from \"./helpers/getGifs\"; // se trae la funcion de la carpeta helpers donde se encuentra el getgifs\r\nimport {useFechGifs} from \"./hooks/useFechGifs\";\r\n\r\nexport const GifGrids= ({category})=>{ //n category es el prop que pasas a la otra ap\r\n\r\n    //const state = useFechGifs(); //este sera el cosume hook que es traido del useFechGifs\r\n//se desestructura la constante de arriba\r\n    const {data:imagenes,loading} = useFechGifs(category);\r\n\r\n\r\n//se comenta esto para el uso del custom hook\r\n// const [images, setImages]= useState([]);\r\n//\r\n// useEffect( () => {\r\n//     getGifs(category)//  este getGifs es el que retorna la promesa creada con el async\r\n//     .then(setImages)// al ser una promesa podemos poner un .them el cual traera consigo set images el cual es una funcion modificadora\r\n// }, [category] );\r\n // el corchete es el segundo argumento de la funcion que significa al ponerse sin nada adentro que solo se ejecutara una vez asi no traera la informaciion cada que se introdusca un dato\r\n //se agrega categorya por si en algun momento la categoria llegase a cambiar se volveria a ejecutar todo lo de esa seccion\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n            <h3> {category} </h3>\r\n            {loading && <p>Loading</p>}\r\n            <div className=\"card-grid\">\r\n            {/*se desestructura la prop*/}\r\n            {\r\n                imagenes.map( img => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                        />\r\n                ))\r\n            }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n // <ol> esto se hace para crear una lista ordenada trayendo solo 10 imagenes pero se comenta por que se creo un nuevo componente llamaddo gifgrifitems el cual hara la funcion de traer la imagfen y su titutlo\r\n // {\r\n //     images.map( title => se crea esta funcion para crear una lista con 10 imagenes, tiene como argumento el nombre imagenes\r\n //         <li key={title.id}> dentro de lista se trae el key\r\n //         {title.title} se desestructura el title que es la funcion de arriba y se llama  como una direccion al titulo que ejecutara la accion de nombrar al titulo de la imgen\r\n //         </li>\r\n //     )\r\n // }\r\n // </ol>\r\n","import {useState, useEffect} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\"\r\n\r\nexport const useFechGifs = (category) => {\r\n\r\n        const [state, setState] = useState({ // cuando se utiliza el estado se le crean dos efectos el loding siempre se pone por defecto.\r\n            data:[],\r\n            loading:true,\r\n        });\r\n\r\n        useEffect( () => {\r\n\r\n                getGifs( category)\r\n                    .then (imgs => {\r\n                        setState({\r\n                            data:imgs,\r\n                            loading: false\r\n                        });\r\n                        //setTimeout( () => { // funcion propia de java script se habia creado esta funcion para que tardara en cargar tres segundos pero mahora se hara otro custom huuk\r\n                        //},3000 );\r\n                    })\r\n\r\n        }, [category])\r\n\r\n        // setTimeout( () => { // funcion propia de java script se habia creado esta funcion para que tardara en cargar tres segundos pero mahora se hara otro custom huuk\r\n        //         setState({\r\n        //             data:[1,2,3,4,5,6,7,8],\r\n        //             loading: false,\r\n        //         });\r\n        //\r\n        // }, 3000); //lo que esta adentro del setstate se ejecutara pa\r\n\r\n        return state;  // regresara el state o estrado en que se encuentra\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport {GifGrids} from \"./GifGrids\";\r\nexport const GifExpertApp = () => {\r\n    const [categorias, setCategorias] = useState([\"Naruto\"]);\r\n    // const handleAdd= () => {\r\n    //     setCategorias([...categorias,\"inuyasha\"]);\r\n    //}\r\n\r\n    //document.write(categorias);\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory  setCategorias={setCategorias} />\r\n             {/* dentro se podria llamar categorias={categorias} para pasarlo como porops del otro lado pero es mmas facil si lo pasas como una funcion asi ya no hay que hacer uso de la props*/}\r\n            <hr/>\r\n            {/*<button onClick={handleAdd}>AÃ±adir</button> este boton se quita para hacer la caja de texto en AddCategory*/}\r\n            <ul>\r\n                {\r\n                    //return <li key={category}>{category}</li>; este es el return de categorias.map perom como se traera el componente creado en GifGrinds lo comentamos ya que no se usara\r\n                    categorias.map ( category =>\r\n                        <GifGrids\r\n                        key={category}\r\n                        category={category} />\r\n\r\n                    )\r\n                }\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from \"./GifExpertApp\";\nReactDOM.render(<GifExpertApp />,document.getElementById('root'));\n"],"sourceRoot":""}